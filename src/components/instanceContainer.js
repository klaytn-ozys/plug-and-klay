import React from 'react'
import UniversalDAppUI from './universal-dapp-ui'
import {Dispatch} from 'redux'
import {clearContractInstance as clearAction} from '../redux/actions/contract'
import {connect} from 'react-redux'

const css = require('../styles/run-tab-styles')

class InstanceContainer extends React.Component {
  constructor (props) {
    super(props)

    this.state = {
      updatedAt: props.updatedAt,
      contracts: props.list
    }
  }

  componentDidUpdate (prevProps: Readonly<P>, prevState: Readonly<S>, snapshot: SS) {
    if (this.props.updatedAt !== this.state.updatedAt) {
      this.setState({
        updatedAt: this.props.updatedAt,
        contracts: this.props.list
      })
    }
  }

  render () {
    return (
      <div className={`${css.instanceContainer} border-0 list-group-item`}>
        <div className="d-flex justify-content-between align-items-center pl-2 ml-1 mb-2"
             title="Autogenerated generic user interfaces for interaction with deployed contracts">
          Deployed Contracts
          <i className={`mr-2 ${css.icon} far fa-trash-alt`} data-id="deployAndRunClearInstances"
             onClick={ this.props.clearInstance }
             title="Clear instances list and reset recorder" aria-hidden="true">
          </i>
        </div>
        {
          this.state.contracts.map((contract) => {
            return <UniversalDAppUI idx={ contract.idx } key={ contract.created } abi={ contract.abi } address={ contract.address } created={ contract.created } contractName={ contract.name } blockchain={ this.props.blockchain } />
          })
        }
        {
          this.state.contracts.length < 1 && <span className="mx-2 mt-3 alert alert-warning" data-id="deployAndRunNoInstanceText" role="alert">
        Currently you have no contract instances to interact with.
      </span>
        }
      </div>
    )
  }
}

const mapStateToProps = ({ contract }: ReduxState) => ({
  list: contract.instances,
  // compFails: contract.newlyCompiled.success === false,
  updatedAt: contract.updatedAt.instances
})


const mapDispatchToProps = (dispatch: Dispatch) => ({
  clearInstance: () => dispatch(clearAction()),
})

export default connect(
  mapStateToProps,
  mapDispatchToProps,
  null,
  { forwardRef: true }
)(InstanceContainer)
